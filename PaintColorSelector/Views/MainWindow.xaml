<Window x:Class="PaintColorSelector.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:v="clr-namespace:PaintColorSelector.Views"
        xmlns:vm="clr-namespace:PaintColorSelector.ViewModels"
        Title="PaintColorSelector"
        Width="800"
        Height="480">

    <Window.DataContext>
        <vm:MainWindowViewModel x:Name="ViewModel" />
    </Window.DataContext>

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Style/CheckedListBoxStyle.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <CollectionViewSource x:Key="PaintListViewSource" Source="{Binding PaintList}" />
        </ResourceDictionary>
    </Window.Resources>

    <i:Interaction.Triggers>

        <!--  Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう  -->
        <!--  Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります  -->
        <!--  Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています  -->

        <!--  WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます  -->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodName="Initialize" MethodTarget="{Binding}" />
        </i:EventTrigger>

        <!--  Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます  -->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </i:EventTrigger>

        <!--  WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください  -->

    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--  0 Menu  -->
        <Menu>
            <MenuItem Header="File">
                <MenuItem Click="Close_Click" Header="Exit" />
            </MenuItem>
            <MenuItem Header="Help">
                <MenuItem Click="About_Click" Header="About..." />
            </MenuItem>
        </Menu>

        <!--  1 Paint  -->
        <Grid Grid.Row="1" Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="80" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Rectangle Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" Stroke="Black">
                <Rectangle.Fill>
                    <!--  todo FindPaint.Value が null の時  -->
                    <SolidColorBrush Color="{Binding FindPaint.Value.Color}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock Grid.Row="0" Grid.Column="2" Text="{Binding FindPaint.Value.ColorName}" />
            <TextBlock Grid.Row="1" Grid.Column="2" Text="{Binding FindPaint.Value.Note}" />

            <Rectangle Grid.Row="2" Grid.RowSpan="2" Grid.Column="0" Stroke="Black">
                <Rectangle.Fill>
                    <!--  todo SelectedPaint.Value が null の時  -->
                    <SolidColorBrush Color="{Binding SelectedPaint.Value.Color}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock Grid.Row="2" Grid.Column="2" Text="{Binding SelectedPaint.Value.ColorName}" />
            <TextBlock Grid.Row="3" Grid.Column="2" Text="{Binding SelectedPaint.Value.Note}" />
        </Grid>

        <!--  2 Filter  -->
        <Grid Grid.Row="2" Margin="5,0,5,5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <TextBlock VerticalAlignment="Center" Text="Filter" />
            <CheckBox Grid.Column="2" VerticalAlignment="Center" Content="All" IsChecked="{Binding AllCheckBox, Mode=OneWay}" IsThreeState="True">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <l:LivetCallMethodAction MethodName="AllCheckBox_Click" MethodTarget="{Binding}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </CheckBox>
            <ListBox x:Name="SeriesListBox"
                     Grid.Column="4"
                     Width="Auto"
                     ItemsSource="{Binding SeriesList}"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     ScrollViewer.VerticalScrollBarVisibility="Disabled"
                     SelectionChanged="SeriesListBox_SelectionChanged"
                     SelectionMode="Multiple">
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Text}" />
                    </DataTemplate>
                </ListBox.ItemTemplate>
                <!--  ContainerStyle  -->
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                        <Setter Property="Margin" Value="0,0,5,0" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                    <!--  CheckBoxに見た目を差し替えてContentをバインドする  -->
                                    <CheckBox IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSelected}">
                                        <CheckBox.Content>
                                            <ContentPresenter />
                                        </CheckBox.Content>
                                    </CheckBox>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListBox.ItemContainerStyle>
            </ListBox>
        </Grid>

        <!--  3 DataGrid  -->
        <DataGrid x:Name="PaintListDataGrid"
                  Grid.Row="3"
                  Margin="5,0,5,5"
                  AutoGenerateColumns="False"
                  IsReadOnly="True"
                  ItemsSource="{Binding Mode=OneWay, Source={StaticResource PaintListViewSource}}"
                  MouseDoubleClick="SelectFindPaint"
                  SelectedItem="{Binding SelectedPaint.Value}"
                  SelectionMode="Single">
            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Click="SelectFindPaint" Header="選択" />
                </ContextMenu>
            </DataGrid.ContextMenu>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Code">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{Binding Color}" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Margin" Value="2,0" />
                            <Setter Property="Text" Value="{Binding ColorCode}" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Width="2*" Binding="{Binding ColorName}" Header="Name" />
                <DataGridTextColumn Width="*" Binding="{Binding Note}" Header="Note" />
                <DataGridTextColumn Binding="{Binding DeltaE, StringFormat=f2}" Header="ΔE">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="Margin" Value="2,0" />
                            <Setter Property="TextAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!--  4 StatusBar  -->
        <StatusBar Grid.Row="4">
            <StatusBarItem Content="{Binding Clock}" />
            <StatusBarItem Content="" />
        </StatusBar>

    </Grid>
</Window>
